#pragma SPL_NON_GENERIC_OPERATOR_IMPLEMENTATION_PROLOGUE

//My BS function
double testing(double B[]){
    double hold = 5.0;
    return hold;
}


MY_OPERATOR::MY_OPERATOR()
{
  
}


MY_OPERATOR::~MY_OPERATOR() 
{

}


void MY_OPERATOR::allPortsReady() 
{

}
 

void MY_OPERATOR::prepareToShutdown() 
{
}


void MY_OPERATOR::process(uint32_t idx)
{
 
}


void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
    IPort0Type & ituple = static_cast<IPort0Type &>(tuple);
    list<float64>holdList = ituple.get_vals();
    double *B = &(holdList[0]);
    list<float64>newList(holdList.size());
    for(int i =0;i<holdList.size();i++){
        newList[i] = B[i];
    }
    OPort0Type otuple;
    otuple.set_inv(newList);
    
    double out = testing(B);
    printf("%f",out);
    
    submit(otuple,0);
}


void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
}


void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
}

#pragma SPL_NON_GENERIC_OPERATOR_IMPLEMENTATION_EPILOGUE
